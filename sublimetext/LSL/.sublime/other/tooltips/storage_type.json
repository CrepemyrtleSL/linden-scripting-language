[
    {
        "description":
        {
            "en_US": "Integer type\n\n32-bit integer value\n[-2 147 483 648 to +2 147 483 647]\n[0x80000000 to 0x7FFFFFFF]"
        },
        "name": "integer",
        "snippets":
        [
            "integer intNum = 1;",
            "integer intConst = TRUE;",
            "integer intHex = 0x01;",
            "integer intNeg = -1;"
        ]
    },
    {
        "description":
        {
            "en_US": "Floating-point type\n\n32-bit floating point value\n[1.175494351E-38 to 3.402823466E+38]"
        },
        "name": "float",
        "snippets":
        [
            "float min = 1.175494351E-38;",
            "float max = 3.402823466E+38;",
            "float sci = 2.6E-5;",
            "float sci_a = 2.6E+3;",
            "float sci_b = 2.6E3;",
            "float sci_c = 26000.E-1;",
            "float f = 2600;//implicitly typecast to a float",
            "float E = 85.34859;",
            "float cast = (float)\"42\";//explicit typecast to a float"
        ]
    },
    {
        "description":
        {
            "en_US": "String type\n\nHolds utf-8 encoded text data."
        },
        "name": "string",
        "snippets":
        [
            "string s = \"whatever\";",
            "string quote_single = \"'\";",
            "string escaped_new_line = \"\\n\";// llUnescapeURL(\"%0A\")",
            "string escaped_tab = \"\\t\";// llUnescapeURL(\"%20%20%20%20\")",
            "string escaped_quote_double = \"\\\"\";",
            "string escaped_back_slash = \"\\\\\";"
        ]
    },
    {
        "description":
        {
            "en_US": "Key type\n\nUse NULL_KEY to test for empty keys.\n128-bit unique identifier (in LSL either UUID-1 or UUID-4)"
        },
        "name": "key",
        "snippets":
        [
            "key uuid_one = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n\n//\twhere:\n//\t\tx is [0-9a-f]",
            "key uuid_four = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n\n//\twhere:\n//\t\t4 is 4\n//\t\tx is [0-9a-f]\n//\t\ty is [8-9a-b]"
        ]
    },
    {
        "description":
        {
            "en_US": "Vector type of 3 floats\n\nUsed to represent 3D motion, Euler angles, and color.\n\nAccess components by .x, .y, or .z"
        },
        "name": "vector",
        "snippets":
        [
            "vector vec;\nfloat x = vec.x;\nfloat y = vec.y;\nfloat z = vec.z;"
        ]
    },
    {
        "description":
        {
            "en_US": "Rotation type of 4 floats\n\nUsed to represent rotation.\n\nAccess components by .x, .y, .z, or .s"
        },
        "name": "rotation",
        "snippets":
        [
            "rotation rot;\nfloat x = rot.x;\nfloat y = rot.y;\nfloat z = rot.z;\nfloat s = rot.s;",
            "quaternion quat;\nfloat x = quat.x;\nfloat y = quat.y;\nfloat z = quat.z;\nfloat s = quat.s;"
        ]
    },
    {
        "description":
        {
            "en_US": "Rotation type of 4 floats\n\nUsed to represent rotation.\n\nAccess components by .x, .y, .z, or .s"
        },
        "name": "quaternion",
        "snippets":
        [
            "quaternion quat;\nfloat x = quat.x;\nfloat y = quat.y;\nfloat z = quat.z;\nfloat s = quat.s;",
            "rotation rot;\nfloat x = rot.x;\nfloat y = rot.y;\nfloat z = rot.z;\nfloat s = rot.s;"
        ]
    },
    {
        "description":
        {
            "en_US": "List of various data types.\n\nList items may not be of type list, but any other type. List items may have different types."
        },
        "name": "list"
    }
]
